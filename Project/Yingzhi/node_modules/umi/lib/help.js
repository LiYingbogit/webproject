"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const commands = {
  build: {
    name: 'build',
    description: 'Create a production build'
  },
  dev: {
    name: 'dev',
    description: 'Start a development server'
  },
  test: {
    name: 'test',
    description: 'Start a development server'
  },
  help: {
    name: 'help',
    description: 'show help',
    aliases: ['h']
  },
  version: {
    name: 'version',
    description: 'Outputs Umi version.',
    aliases: ['v']
  }
};

class Logger {
  constructor() {
    _defineProperty(this, "info", message => {
      console.log(`${message}`);
    });

    _defineProperty(this, "error", message => {
      console.error(_chalk.default.red(message));
    });

    _defineProperty(this, "success", message => {
      console.error(_chalk.default.green(message));
    });
  }

}

function _default(opts = {}) {
  const type = opts.type;
  const logger = new Logger();
  logger.info(`\nUsage: umi <command>\n`);

  if (!commands[type]) {
    logger.error(`Unknown script : ${_chalk.default.cyan(type)}.`);
  }

  logger.info(`Available Commands:`);

  for (const key in commands) {
    if (commands.hasOwnProperty(key)) {
      const cmd = commands[key];
      logger.info(`  ${_chalk.default.cyan(cmd.name)} ${cmd.description}`);
    }
  } // Support for subsequent extensions
  // logger.info(`\nFor more detailed help run "umi [command name] --help"`);

}